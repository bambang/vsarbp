(** 
 Verified SAR-BP: A verified C implementation of SAR backprojection
 with a certified absolute error bound.
 
 Version 1.0 (2015-12-04)
 
 Copyright (C) 2015 Reservoir Labs Inc.
 All rights reserved.
 
 This file is free software. You can redistribute it and/or modify it
 under the terms of the GNU General Public License as published by the
 Free Software Foundation, either version 3 of the License (GNU GPL
 v3), or (at your option) any later version.  A verbatim copy of the
 GNU GPL v3 is included in gpl-3.0.txt.
 
 This file is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See LICENSE for
 more details about the use and redistribution of this file and the
 whole Verified SAR-BP library.
 
 This work is sponsored in part by DARPA MTO as part of the Power
 Efficiency Revolution for Embedded Computing Technologies (PERFECT)
 program (issued by DARPA/CMO under Contract No: HR0011-12-C-0123). The
 views and conclusions contained in this work are those of the authors
 and should not be interpreted as representing the official policies,
 either expressly or implied, of the DARPA or the
 U.S. Government. Distribution Statement "A" (Approved for Public
 Release, Distribution Unlimited.)
 
 
 If you are using or modifying Verified SAR-BP in your work, please
 consider citing the following paper:
 
 Tahina Ramananandro, Paul Mountcastle, Benoit Meister and Richard
 Lethin.
 A Unified Coq Framework for Verifying C Programs with Floating-Point
 Computations.
 In CPP (5th ACM/SIGPLAN conference on Certified Programs and Proofs)
 2016.
 
 
 Verified SAR-BP derives from prior work listed in ACKS along with
 their copyright and licensing information.
 
 Verified SAR-BP requires third-party libraries listed in ACKS along
 with their copyright information.
*)
(**
Author: Tahina Ramananandro <ramananandro@reservoir.com>
Author: Benoit Meister      <meister@reservoir.com>

    Abstract syntax tree of the C implementation of SAR backprojection
    in backprojection.c. 

    C implementation of SAR backprojection with linear
    interpolation. Square root is computed in double. Sine is computed
    in double, then rounded back to single. Pulse contributions are
    computed in single-precision, but summed up in double before the
    total sum is rounded back to single. No other approximate
    optimizations are performed.

    This file was automatically generated by CompCert Clightgen
    from our C code in backprojection.c
**)

Require Import Clightdefs.

Local Open Scope Z_scope.

Definition _px : ident := 85%positive.
Definition _bin_floor : ident := 65%positive.
Definition ___builtin_fmin : ident := 40%positive.
Definition ___compcert_va_int32 : ident := 16%positive.
Definition ___builtin_fsqrt : ident := 38%positive.
Definition ___builtin_read32_reversed : ident := 46%positive.
Definition _image_i : ident := 69%positive.
Definition _data_i : ident := 62%positive.
Definition _norm : ident := 54%positive.
Definition ___i64_stod : ident := 22%positive.
Definition ___builtin_va_start : ident := 12%positive.
Definition _R : ident := 92%positive.
Definition _bin : ident := 63%positive.
Definition ___builtin_annot_intval : ident := 10%positive.
Definition ___builtin_fnmsub : ident := 44%positive.
Definition ___builtin_negl : ident := 3%positive.
Definition ___builtin_write32_reversed : ident := 2%positive.
Definition ___builtin_write16_reversed : ident := 1%positive.
Definition ___i64_shr : ident := 31%positive.
Definition _matched_filter_r : ident := 88%positive.
Definition _dxdy_2 : ident := 79%positive.
Definition _platpos_z : ident := 72%positive.
Definition _cos : ident := 49%positive.
Definition _w : ident := 66%positive.
Definition _sample_r : ident := 59%positive.
Definition ___builtin_addl : ident := 4%positive.
Definition _dR_inv : ident := 78%positive.
Definition _ydiff : ident := 94%positive.
Definition _image_r : ident := 68%positive.
Definition _sin_cos : ident := 58%positive.
Definition ___i64_smod : ident := 28%positive.
Definition ___builtin_fabs : ident := 7%positive.
Definition ___i64_dtou : ident := 21%positive.
Definition ___compcert_va_float64 : ident := 18%positive.
Definition _matched_filter_i : ident := 89%positive.
Definition ___builtin_read16_reversed : ident := 45%positive.
Definition _ku_2 : ident := 80%positive.
Definition ___builtin_va_arg : ident := 13%positive.
Definition ___i64_udiv : ident := 27%positive.
Definition _py : ident := 84%positive.
Definition _ix : ident := 82%positive.
Definition ___builtin_bswap : ident := 33%positive.
Definition _cosine : ident := 56%positive.
Definition ___i64_utof : ident := 25%positive.
Definition ___builtin_va_end : ident := 15%positive.
Definition _sample_i : ident := 60%positive.
Definition ___i64_dtos : ident := 20%positive.
Definition ___i64_sar : ident := 32%positive.
Definition _xdiff : ident := 93%positive.
Definition _platpos_x : ident := 70%positive.
Definition ___i64_stof : ident := 24%positive.
Definition _sar_backprojection2 : ident := 96%positive.
Definition _bin_sample : ident := 67%positive.
Definition ___compcert_va_int64 : ident := 17%positive.
Definition ___builtin_memcpy_aligned : ident := 8%positive.
Definition ___builtin_subl : ident := 5%positive.
Definition _ku : ident := 73%positive.
Definition _n : ident := 50%positive.
Definition ___builtin_fnmadd : ident := 43%positive.
Definition _R0 : ident := 74%positive.
Definition _z : ident := 53%positive.
Definition _sqrt : ident := 47%positive.
Definition _arg : ident := 57%positive.
Definition _prod_i : ident := 91%positive.
Definition ___builtin_clz : ident := 36%positive.
Definition ___builtin_va_copy : ident := 14%positive.
Definition ___builtin_mull : ident := 6%positive.
Definition ___i64_sdiv : ident := 26%positive.
Definition ___compcert_va_composite : ident := 19%positive.
Definition ___builtin_fmax : ident := 39%positive.
Definition _prod_r : ident := 90%positive.
Definition _iy : ident := 83%positive.
Definition _data_r : ident := 61%positive.
Definition ___builtin_membar : ident := 11%positive.
Definition _main : ident := 97%positive.
Definition ___builtin_ctz : ident := 37%positive.
Definition _p : ident := 81%positive.
Definition _dxdy : ident := 76%positive.
Definition _contrib_r : ident := 86%positive.
Definition ___builtin_fmsub : ident := 42%positive.
Definition ___builtin_annot : ident := 9%positive.
Definition _b : ident := 64%positive.
Definition _y : ident := 52%positive.
Definition ___builtin_fmadd : ident := 41%positive.
Definition _contrib_i : ident := 87%positive.
Definition _z0 : ident := 77%positive.
Definition _platpos_y : ident := 71%positive.
Definition _dR : ident := 75%positive.
Definition ___builtin_bswap32 : ident := 34%positive.
Definition ___i64_umod : ident := 29%positive.
Definition _zdiff : ident := 95%positive.
Definition _sine : ident := 55%positive.
Definition ___builtin_bswap16 : ident := 35%positive.
Definition ___i64_shl : ident := 30%positive.
Definition ___i64_utod : ident := 23%positive.
Definition _x : ident := 51%positive.
Definition _sin : ident := 48%positive.

Definition f_norm := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_n, (tptr tdouble)) :: (_x, tdouble) :: (_y, tdouble) ::
                (_z, tdouble) :: nil);
  fn_vars := nil;
  fn_temps := ((98%positive, tdouble) :: nil);
  fn_body :=
(Ssequence
  (Scall (Some 98%positive)
    (Evar _sqrt (Tfunction (Tcons tdouble Tnil) tdouble cc_default))
    ((Ebinop Oadd
       (Ebinop Oadd
         (Ebinop Omul (Etempvar _x tdouble) (Etempvar _x tdouble) tdouble)
         (Ebinop Omul (Etempvar _y tdouble) (Etempvar _y tdouble) tdouble)
         tdouble)
       (Ebinop Omul (Etempvar _z tdouble) (Etempvar _z tdouble) tdouble)
       tdouble) :: nil))
  (Sassign (Ederef (Etempvar _n (tptr tdouble)) tdouble)
    (Etempvar 98%positive tdouble)))
|}.

Definition f_sin_cos := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_sine, (tptr tfloat)) :: (_cosine, (tptr tfloat)) ::
                (_arg, tdouble) :: nil);
  fn_vars := nil;
  fn_temps := ((100%positive, tdouble) :: (99%positive, tdouble) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Scall (Some 99%positive)
      (Evar _sin (Tfunction (Tcons tdouble Tnil) tdouble cc_default))
      ((Etempvar _arg tdouble) :: nil))
    (Sassign (Ederef (Etempvar _sine (tptr tfloat)) tfloat)
      (Ecast (Etempvar 99%positive tdouble) tfloat)))
  (Ssequence
    (Scall (Some 100%positive)
      (Evar _cos (Tfunction (Tcons tdouble Tnil) tdouble cc_default))
      ((Etempvar _arg tdouble) :: nil))
    (Sassign (Ederef (Etempvar _cosine (tptr tfloat)) tfloat)
      (Ecast (Etempvar 100%positive tdouble) tfloat))))
|}.

Section WITHCONST.

Variable N_RANGE_UPSAMPLED: Z.

Definition f_bin_sample := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_sample_r, (tptr tfloat)) :: (_sample_i, (tptr tfloat)) ::
                (_data_r, (tptr tfloat)) :: (_data_i, (tptr tfloat)) ::
                (_bin, (tptr tdouble)) :: nil);
  fn_vars := nil;
  fn_temps := ((_b, tdouble) :: (_bin_floor, tint) :: (_w, tfloat) :: nil);
  fn_body :=
(Ssequence
  (Sset _b (Ederef (Etempvar _bin (tptr tdouble)) tdouble))
  (Ssequence
    (Sifthenelse (Ebinop Oge (Etempvar _b tdouble)
                   (Econst_int (Int.repr 0) tint) tint)
      (Sifthenelse (Ebinop Olt (Etempvar _b tdouble)
                     (Ebinop Osub (Econst_int (Int.repr N_RANGE_UPSAMPLED) tint)
                       (Econst_int (Int.repr 1) tint) tint) tint)
        (Ssequence
          (Sset _bin_floor (Ecast (Etempvar _b tdouble) tint))
          (Ssequence
            (Sset _w
              (Ecast
                (Ebinop Osub (Etempvar _b tdouble)
                  (Ecast (Etempvar _bin_floor tint) tdouble) tdouble) tfloat))
            (Ssequence
              (Sassign (Ederef (Etempvar _sample_r (tptr tfloat)) tfloat)
                (Ebinop Oadd
                  (Ebinop Omul
                    (Ebinop Osub
                      (Econst_single (Float32.of_bits (Int.repr 1065353216)) tfloat)
                      (Etempvar _w tfloat) tfloat)
                    (Ederef
                      (Ebinop Oadd (Etempvar _data_r (tptr tfloat))
                        (Etempvar _bin_floor tint) (tptr tfloat)) tfloat)
                    tfloat)
                  (Ebinop Omul (Etempvar _w tfloat)
                    (Ederef
                      (Ebinop Oadd (Etempvar _data_r (tptr tfloat))
                        (Ebinop Oadd (Etempvar _bin_floor tint)
                          (Econst_int (Int.repr 1) tint) tint) (tptr tfloat))
                      tfloat) tfloat) tfloat))
              (Ssequence
                (Sassign (Ederef (Etempvar _sample_i (tptr tfloat)) tfloat)
                  (Ebinop Oadd
                    (Ebinop Omul
                      (Ebinop Osub
                        (Econst_single (Float32.of_bits (Int.repr 1065353216)) tfloat)
                        (Etempvar _w tfloat) tfloat)
                      (Ederef
                        (Ebinop Oadd (Etempvar _data_i (tptr tfloat))
                          (Etempvar _bin_floor tint) (tptr tfloat)) tfloat)
                      tfloat)
                    (Ebinop Omul (Etempvar _w tfloat)
                      (Ederef
                        (Ebinop Oadd (Etempvar _data_i (tptr tfloat))
                          (Ebinop Oadd (Etempvar _bin_floor tint)
                            (Econst_int (Int.repr 1) tint) tint)
                          (tptr tfloat)) tfloat) tfloat) tfloat))
                (Sreturn None)))))
        Sskip)
      Sskip)
    (Ssequence
      (Sassign (Ederef (Etempvar _sample_r (tptr tfloat)) tfloat)
        (Econst_single (Float32.of_bits (Int.repr 0)) tfloat))
      (Sassign (Ederef (Etempvar _sample_i (tptr tfloat)) tfloat)
        (Econst_single (Float32.of_bits (Int.repr 0)) tfloat)))))
|}.

Variable BP_NPIX_X: Z.
Variable BP_NPIX_Y: Z.
Variable N_PULSES: Z.

Definition f_sar_backprojection2 := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_image_r, (tptr (tarray tfloat BP_NPIX_X))) ::
                (_image_i, (tptr (tarray tfloat BP_NPIX_X))) ::
                (_data_r, (tptr (tarray tfloat N_RANGE_UPSAMPLED))) ::
                (_data_i, (tptr (tarray tfloat N_RANGE_UPSAMPLED))) ::
                (_platpos_x, (tptr tdouble)) ::
                (_platpos_y, (tptr tdouble)) ::
                (_platpos_z, (tptr tdouble)) :: (_ku, (tptr tdouble)) ::
                (_R0, (tptr tdouble)) :: (_dR, (tptr tdouble)) ::
                (_dxdy, (tptr tdouble)) :: (_z0, (tptr tdouble)) :: nil);
  fn_vars := ((_sample_r, tfloat) :: (_sample_i, tfloat) ::
              (_matched_filter_r, tfloat) :: (_matched_filter_i, tfloat) ::
              (_R, tdouble) :: (_bin, tdouble) :: nil);
  fn_temps := ((_dR_inv, tdouble) :: (_dxdy_2, tdouble) ::
               (_ku_2, tdouble) :: (_p, tint) :: (_ix, tint) ::
               (_iy, tint) :: (_py, tdouble) :: (_px, tdouble) ::
               (_contrib_r, tdouble) :: (_contrib_i, tdouble) ::
               (_prod_r, tfloat) :: (_prod_i, tfloat) :: (_xdiff, tdouble) ::
               (_ydiff, tdouble) :: (_zdiff, tdouble) :: nil);
  fn_body :=
(Ssequence
  (Sset _dR_inv
    (Ebinop Odiv
      (Econst_float (Float.of_bits (Int64.repr 4607182418800017408)) tdouble)
      (Ederef (Etempvar _dR (tptr tdouble)) tdouble) tdouble))
  (Ssequence
    (Sset _dxdy_2
      (Ebinop Omul (Ederef (Etempvar _dxdy (tptr tdouble)) tdouble)
        (Econst_float (Float.of_bits (Int64.repr 4602678819172646912)) tdouble)
        tdouble))
    (Ssequence
      (Sset _ku_2
        (Ebinop Omul (Ederef (Etempvar _ku (tptr tdouble)) tdouble)
          (Econst_float (Float.of_bits (Int64.repr 4611686018427387904)) tdouble)
          tdouble))
      (Ssequence
        (Sset _iy (Econst_int (Int.repr 0) tint))
        (Sloop
          (Ssequence
            (Sifthenelse (Ebinop Olt (Etempvar _iy tint)
                           (Econst_int (Int.repr BP_NPIX_Y) tint) tint)
              Sskip
              Sbreak)
            (Ssequence
              (Sset _py
                (Ebinop Omul
                  (Ecast
                    (Ebinop Oadd
                      (Ebinop Oadd
                        (Eunop Oneg (Econst_int (Int.repr BP_NPIX_Y) tint) tint)
                        (Econst_int (Int.repr 1) tint) tint)
                      (Ebinop Omul (Econst_int (Int.repr 2) tint)
                        (Etempvar _iy tint) tint) tint) tdouble)
                  (Etempvar _dxdy_2 tdouble) tdouble))
              (Ssequence
                (Sset _ix (Econst_int (Int.repr 0) tint))
                (Sloop
                  (Ssequence
                    (Sifthenelse (Ebinop Olt (Etempvar _ix tint)
                                   (Econst_int (Int.repr BP_NPIX_X) tint) tint)
                      Sskip
                      Sbreak)
                    (Ssequence
                      (Sset _px
                        (Ebinop Omul
                          (Ecast
                            (Ebinop Oadd
                              (Ebinop Oadd
                                (Eunop Oneg (Econst_int (Int.repr BP_NPIX_X) tint)
                                  tint) (Econst_int (Int.repr 1) tint) tint)
                              (Ebinop Omul (Econst_int (Int.repr 2) tint)
                                (Etempvar _ix tint) tint) tint) tdouble)
                          (Etempvar _dxdy_2 tdouble) tdouble))
                      (Ssequence
                        (Sset _contrib_r
                          (Econst_float (Float.of_bits (Int64.repr 0)) tdouble))
                        (Ssequence
                          (Sset _contrib_i
                            (Econst_float (Float.of_bits (Int64.repr 0)) tdouble))
                          (Ssequence
                            (Ssequence
                              (Sset _p (Econst_int (Int.repr 0) tint))
                              (Sloop
                                (Ssequence
                                  (Sifthenelse (Ebinop Olt (Etempvar _p tint)
                                                 (Econst_int (Int.repr N_PULSES) tint)
                                                 tint)
                                    Sskip
                                    Sbreak)
                                  (Ssequence
                                    (Sset _xdiff
                                      (Ebinop Osub
                                        (Ederef
                                          (Ebinop Oadd
                                            (Etempvar _platpos_x (tptr tdouble))
                                            (Etempvar _p tint)
                                            (tptr tdouble)) tdouble)
                                        (Etempvar _px tdouble) tdouble))
                                    (Ssequence
                                      (Sset _ydiff
                                        (Ebinop Osub
                                          (Ederef
                                            (Ebinop Oadd
                                              (Etempvar _platpos_y (tptr tdouble))
                                              (Etempvar _p tint)
                                              (tptr tdouble)) tdouble)
                                          (Etempvar _py tdouble) tdouble))
                                      (Ssequence
                                        (Sset _zdiff
                                          (Ebinop Osub
                                            (Ederef
                                              (Ebinop Oadd
                                                (Etempvar _platpos_z (tptr tdouble))
                                                (Etempvar _p tint)
                                                (tptr tdouble)) tdouble)
                                            (Ederef
                                              (Etempvar _z0 (tptr tdouble))
                                              tdouble) tdouble))
                                        (Ssequence
                                          (Scall None
                                            (Evar _norm (Tfunction
                                                          (Tcons
                                                            (tptr tdouble)
                                                            (Tcons tdouble
                                                              (Tcons tdouble
                                                                (Tcons
                                                                  tdouble
                                                                  Tnil))))
                                                          tvoid cc_default))
                                            ((Eaddrof (Evar _R tdouble)
                                               (tptr tdouble)) ::
                                             (Etempvar _xdiff tdouble) ::
                                             (Etempvar _ydiff tdouble) ::
                                             (Etempvar _zdiff tdouble) ::
                                             nil))
                                          (Ssequence
                                            (Sassign (Evar _bin tdouble)
                                              (Ebinop Omul
                                                (Ebinop Osub
                                                  (Evar _R tdouble)
                                                  (Ederef
                                                    (Etempvar _R0 (tptr tdouble))
                                                    tdouble) tdouble)
                                                (Etempvar _dR_inv tdouble)
                                                tdouble))
                                            (Ssequence
                                              (Scall None
                                                (Evar _bin_sample (Tfunction
                                                                    (Tcons
                                                                    (tptr tfloat)
                                                                    (Tcons
                                                                    (tptr tfloat)
                                                                    (Tcons
                                                                    (tptr tfloat)
                                                                    (Tcons
                                                                    (tptr tfloat)
                                                                    (Tcons
                                                                    (tptr tdouble)
                                                                    Tnil)))))
                                                                    tvoid
                                                                    cc_default))
                                                ((Eaddrof
                                                   (Evar _sample_r tfloat)
                                                   (tptr tfloat)) ::
                                                 (Eaddrof
                                                   (Evar _sample_i tfloat)
                                                   (tptr tfloat)) ::
                                                 (Ederef
                                                   (Ebinop Oadd
                                                     (Etempvar _data_r (tptr (tarray tfloat N_RANGE_UPSAMPLED)))
                                                     (Etempvar _p tint)
                                                     (tptr (tarray tfloat N_RANGE_UPSAMPLED)))
                                                   (tarray tfloat N_RANGE_UPSAMPLED)) ::
                                                 (Ederef
                                                   (Ebinop Oadd
                                                     (Etempvar _data_i (tptr (tarray tfloat N_RANGE_UPSAMPLED)))
                                                     (Etempvar _p tint)
                                                     (tptr (tarray tfloat N_RANGE_UPSAMPLED)))
                                                   (tarray tfloat N_RANGE_UPSAMPLED)) ::
                                                 (Eaddrof (Evar _bin tdouble)
                                                   (tptr tdouble)) :: nil))
                                              (Ssequence
                                                (Scall None
                                                  (Evar _sin_cos (Tfunction
                                                                   (Tcons
                                                                    (tptr tfloat)
                                                                    (Tcons
                                                                    (tptr tfloat)
                                                                    (Tcons
                                                                    tdouble
                                                                    Tnil)))
                                                                   tvoid
                                                                   cc_default))
                                                  ((Eaddrof
                                                     (Evar _matched_filter_i tfloat)
                                                     (tptr tfloat)) ::
                                                   (Eaddrof
                                                     (Evar _matched_filter_r tfloat)
                                                     (tptr tfloat)) ::
                                                   (Ebinop Omul
                                                     (Etempvar _ku_2 tdouble)
                                                     (Evar _R tdouble)
                                                     tdouble) :: nil))
                                                (Ssequence
                                                  (Sset _prod_r
                                                    (Ebinop Osub
                                                      (Ebinop Omul
                                                        (Evar _sample_r tfloat)
                                                        (Evar _matched_filter_r tfloat)
                                                        tfloat)
                                                      (Ebinop Omul
                                                        (Evar _sample_i tfloat)
                                                        (Evar _matched_filter_i tfloat)
                                                        tfloat) tfloat))
                                                  (Ssequence
                                                    (Sset _prod_i
                                                      (Ebinop Oadd
                                                        (Ebinop Omul
                                                          (Evar _sample_r tfloat)
                                                          (Evar _matched_filter_i tfloat)
                                                          tfloat)
                                                        (Ebinop Omul
                                                          (Evar _sample_i tfloat)
                                                          (Evar _matched_filter_r tfloat)
                                                          tfloat) tfloat))
                                                    (Ssequence
                                                      (Sset _contrib_r
                                                        (Ebinop Oadd
                                                          (Etempvar _contrib_r tdouble)
                                                          (Etempvar _prod_r tfloat)
                                                          tdouble))
                                                      (Sset _contrib_i
                                                        (Ebinop Oadd
                                                          (Etempvar _contrib_i tdouble)
                                                          (Etempvar _prod_i tfloat)
                                                          tdouble)))))))))))))
                                (Sset _p
                                  (Ebinop Oadd (Etempvar _p tint)
                                    (Econst_int (Int.repr 1) tint) tint))))
                            (Ssequence
                              (Sassign
                                (Ederef
                                  (Ebinop Oadd
                                    (Ederef
                                      (Ebinop Oadd
                                        (Etempvar _image_r (tptr (tarray tfloat BP_NPIX_X)))
                                        (Etempvar _iy tint)
                                        (tptr (tarray tfloat BP_NPIX_X)))
                                      (tarray tfloat BP_NPIX_X))
                                    (Etempvar _ix tint) (tptr tfloat))
                                  tfloat)
                                (Ecast (Etempvar _contrib_r tdouble) tfloat))
                              (Sassign
                                (Ederef
                                  (Ebinop Oadd
                                    (Ederef
                                      (Ebinop Oadd
                                        (Etempvar _image_i (tptr (tarray tfloat BP_NPIX_X)))
                                        (Etempvar _iy tint)
                                        (tptr (tarray tfloat BP_NPIX_X)))
                                      (tarray tfloat BP_NPIX_X))
                                    (Etempvar _ix tint) (tptr tfloat))
                                  tfloat)
                                (Ecast (Etempvar _contrib_i tdouble) tfloat))))))))
                  (Sset _ix
                    (Ebinop Oadd (Etempvar _ix tint)
                      (Econst_int (Int.repr 1) tint) tint))))))
          (Sset _iy
            (Ebinop Oadd (Etempvar _iy tint) (Econst_int (Int.repr 1) tint)
              tint)))))))
|}.

Definition composites : list composite_definition :=
nil.

Definition prog : Clight.program := {|
prog_defs :=
((___builtin_fabs,
   Gfun(External (EF_builtin ___builtin_fabs
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_memcpy_aligned,
   Gfun(External (EF_builtin ___builtin_memcpy_aligned
                   (mksignature
                     (AST.Tint :: AST.Tint :: AST.Tint :: AST.Tint :: nil)
                     None cc_default))
     (Tcons (tptr tvoid)
       (Tcons (tptr tvoid) (Tcons tuint (Tcons tuint Tnil)))) tvoid
     cc_default)) ::
 (___builtin_annot,
   Gfun(External (EF_builtin ___builtin_annot
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_structret:=false; cc_unproto:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_structret:=false; cc_unproto:=false|})) ::
 (___builtin_annot_intval,
   Gfun(External (EF_builtin ___builtin_annot_intval
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tschar) (Tcons tint Tnil))
     tint cc_default)) ::
 (___builtin_membar,
   Gfun(External (EF_builtin ___builtin_membar
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_va_start,
   Gfun(External (EF_builtin ___builtin_va_start
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___builtin_va_arg,
   Gfun(External (EF_builtin ___builtin_va_arg
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_va_copy,
   Gfun(External (EF_builtin ___builtin_va_copy
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default))
     (Tcons (tptr tvoid) (Tcons (tptr tvoid) Tnil)) tvoid cc_default)) ::
 (___builtin_va_end,
   Gfun(External (EF_builtin ___builtin_va_end
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___compcert_va_int32,
   Gfun(External (EF_external ___compcert_va_int32
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tvoid) Tnil) tuint cc_default)) ::
 (___compcert_va_int64,
   Gfun(External (EF_external ___compcert_va_int64
                   (mksignature (AST.Tint :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tulong
     cc_default)) ::
 (___compcert_va_float64,
   Gfun(External (EF_external ___compcert_va_float64
                   (mksignature (AST.Tint :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tdouble
     cc_default)) ::
 (___compcert_va_composite,
   Gfun(External (EF_external ___compcert_va_composite
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     (tptr tvoid) cc_default)) ::
 (___i64_dtos,
   Gfun(External (EF_external ___i64_dtos
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tlong cc_default)) ::
 (___i64_dtou,
   Gfun(External (EF_external ___i64_dtou
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tulong cc_default)) ::
 (___i64_stod,
   Gfun(External (EF_external ___i64_stod
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tlong Tnil) tdouble cc_default)) ::
 (___i64_utod,
   Gfun(External (EF_external ___i64_utod
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tulong Tnil) tdouble cc_default)) ::
 (___i64_stof,
   Gfun(External (EF_external ___i64_stof
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tlong Tnil) tfloat cc_default)) ::
 (___i64_utof,
   Gfun(External (EF_external ___i64_utof
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tulong Tnil) tfloat cc_default)) ::
 (___i64_sdiv,
   Gfun(External (EF_external ___i64_sdiv
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___i64_udiv,
   Gfun(External (EF_external ___i64_udiv
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___i64_smod,
   Gfun(External (EF_external ___i64_smod
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___i64_umod,
   Gfun(External (EF_external ___i64_umod
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___i64_shl,
   Gfun(External (EF_external ___i64_shl
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___i64_shr,
   Gfun(External (EF_external ___i64_shr
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tint Tnil)) tulong cc_default)) ::
 (___i64_sar,
   Gfun(External (EF_external ___i64_sar
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___builtin_bswap,
   Gfun(External (EF_builtin ___builtin_bswap
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap32,
   Gfun(External (EF_builtin ___builtin_bswap32
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap16,
   Gfun(External (EF_builtin ___builtin_bswap16
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tushort Tnil) tushort cc_default)) ::
 (___builtin_clz,
   Gfun(External (EF_builtin ___builtin_clz
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_ctz,
   Gfun(External (EF_builtin ___builtin_ctz
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_fsqrt,
   Gfun(External (EF_builtin ___builtin_fsqrt
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_fmax,
   Gfun(External (EF_builtin ___builtin_fmax
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmin,
   Gfun(External (EF_builtin ___builtin_fmin
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmadd,
   Gfun(External (EF_builtin ___builtin_fmadd
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fmsub,
   Gfun(External (EF_builtin ___builtin_fmsub
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmadd,
   Gfun(External (EF_builtin ___builtin_fnmadd
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmsub,
   Gfun(External (EF_builtin ___builtin_fnmsub
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_read16_reversed,
   Gfun(External (EF_builtin ___builtin_read16_reversed
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tushort) Tnil) tushort cc_default)) ::
 (___builtin_read32_reversed,
   Gfun(External (EF_builtin ___builtin_read32_reversed
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tuint) Tnil) tuint cc_default)) ::
 (___builtin_write16_reversed,
   Gfun(External (EF_builtin ___builtin_write16_reversed
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tushort) (Tcons tushort Tnil))
     tvoid cc_default)) ::
 (___builtin_write32_reversed,
   Gfun(External (EF_builtin ___builtin_write32_reversed
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tuint) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (_sqrt,
   Gfun(External (EF_external _sqrt
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (_sin,
   Gfun(External (EF_external _sin
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (_cos,
   Gfun(External (EF_external _cos
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (_norm, Gfun(Internal f_norm)) :: (_sin_cos, Gfun(Internal f_sin_cos)) ::
 (_bin_sample, Gfun(Internal f_bin_sample)) ::
 (_sar_backprojection2, Gfun(Internal f_sar_backprojection2)) :: nil);
prog_public :=
(_sar_backprojection2 :: _bin_sample :: _cos :: _sin :: _sqrt ::
 ___builtin_write32_reversed :: ___builtin_write16_reversed ::
 ___builtin_read32_reversed :: ___builtin_read16_reversed ::
 ___builtin_fnmsub :: ___builtin_fnmadd :: ___builtin_fmsub ::
 ___builtin_fmadd :: ___builtin_fmin :: ___builtin_fmax ::
 ___builtin_fsqrt :: ___builtin_ctz :: ___builtin_clz ::
 ___builtin_bswap16 :: ___builtin_bswap32 :: ___builtin_bswap ::
 ___i64_sar :: ___i64_shr :: ___i64_shl :: ___i64_umod :: ___i64_smod ::
 ___i64_udiv :: ___i64_sdiv :: ___i64_utof :: ___i64_stof :: ___i64_utod ::
 ___i64_stod :: ___i64_dtou :: ___i64_dtos :: ___compcert_va_composite ::
 ___compcert_va_float64 :: ___compcert_va_int64 :: ___compcert_va_int32 ::
 ___builtin_va_end :: ___builtin_va_copy :: ___builtin_va_arg ::
 ___builtin_va_start :: ___builtin_membar :: ___builtin_annot_intval ::
 ___builtin_annot :: ___builtin_memcpy_aligned :: ___builtin_fabs :: nil);
prog_main := _main;
prog_types := composites;
prog_comp_env := make_composite_env composites;
prog_comp_env_eq := refl_equal _
|}.

End WITHCONST.
